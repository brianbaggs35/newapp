class ReportGeneratorService
  include ActionView::Helpers::NumberHelper

  attr_reader :organization, :user

  def initialize(organization:, user:)
    @organization = organization
    @user = user
  end

  def generate_test_run_report(test_run, options = {})
    report_data = build_test_run_report_data(test_run, options)
    generate_pdf_report(report_data, "test_run_report")
  end

  def generate_manual_test_report(manual_test_run, options = {})
    report_data = build_manual_test_report_data(manual_test_run, options)
    generate_pdf_report(report_data, "manual_test_report")
  end

  private

  def build_test_run_report_data(test_run, options)
    {
      title: "Test Run Report: #{test_run.name}",
      organization: organization.name,
      generated_by: user.email,
      generated_at: Time.current,
      test_run: test_run,
      summary: {
        total_tests: test_run.total_tests,
        passed_tests: test_run.passed_tests,
        failed_tests: test_run.failed_tests,
        skipped_tests: test_run.skipped_tests,
        success_rate: test_run.success_rate,
        duration: test_run.duration_formatted,
        started_at: test_run.started_at,
        completed_at: test_run.completed_at
      },
      test_results: options[:include_details] ? test_run.test_results.includes(:organization) : [],
      failed_tests: options[:include_failures] ? test_run.test_results.failed : [],
      charts: options[:include_charts]
    }
  end

  def build_manual_test_report_data(manual_test_run, options)
    {
      title: "Manual Test Report: #{manual_test_run.name}",
      organization: organization.name,
      generated_by: user.email,
      generated_at: Time.current,
      test_run: manual_test_run,
      summary: {
        total_tests: manual_test_run.total_count,
        passed_tests: manual_test_run.passed_count,
        failed_tests: manual_test_run.failed_count,
        blocked_tests: manual_test_run.blocked_count,
        success_rate: manual_test_run.success_rate,
        completion_rate: manual_test_run.completion_percentage,
        started_at: manual_test_run.started_at,
        completed_at: manual_test_run.completed_at
      },
      test_items: options[:include_details] ? manual_test_run.manual_test_run_items.includes(:manual_test_case, :executed_by) : [],
      failed_tests: options[:include_failures] ? manual_test_run.manual_test_run_items.failed : [],
      blocked_tests: options[:include_blocked] ? manual_test_run.manual_test_run_items.blocked : [],
      charts: options[:include_charts]
    }
  end

  def generate_pdf_report(report_data, template_name)
    html_content = render_report_template(template_name, report_data)

    pdf = WickedPdf.new.pdf_from_string(
      html_content,
      page_size: "A4",
      margin: {
        top: 20,
        bottom: 20,
        left: 20,
        right: 20
      },
      header: {
        content: render_header(report_data)
      },
      footer: {
        content: render_footer(report_data),
        spacing: 10
      }
    )

    pdf
  end

  def render_report_template(template_name, data)
    # This would render an ERB template with the report data
    template = File.read(Rails.root.join("app", "views", "reports", "#{template_name}.html.erb"))
    ERB.new(template).result(binding)
  end

  def render_header(data)
    <<~HTML
      <div style="text-align: center; font-size: 12px; color: #666;">
        <strong>#{data[:organization]}</strong> - #{data[:title]}
      </div>
    HTML
  end

  def render_footer(data)
    <<~HTML
      <div style="text-align: center; font-size: 10px; color: #666;">
        Generated by #{data[:generated_by]} on #{data[:generated_at].strftime('%B %d, %Y at %I:%M %p')}
        <span style="float: right;">Page <span class="page"></span> of <span class="topage"></span></span>
      </div>
    HTML
  end
end
